#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_ITEMS 100

// Greedy approach for Knapsack (by value/weight ratio)
void knapsackGreedy(int n, int weights[], int values[], int capacity) {
    float ratio[n];
    int i, j;

    // Calculate value-to-weight ratio for each item
    for (i = 0; i < n; i++) {
        ratio[i] = (float)values[i] / weights[i];
    }

    // Sort items by ratio in descending order
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (ratio[i] < ratio[j]) {
                // Swap ratios
                float tempRatio = ratio[i];
                ratio[i] = ratio[j];
                ratio[j] = tempRatio;

                // Swap weights and values to maintain consistency
                int tempWeight = weights[i];
                weights[i] = weights[j];
                weights[j] = tempWeight;

                int tempValue = values[i];
                values[i] = values[j];
                values[j] = tempValue;
            }
        }
    }

    // Apply Greedy selection
    int totalValue = 0, currentWeight = 0;
    for (i = 0; i < n; i++) {
        if (currentWeight + weights[i] <= capacity) {
            currentWeight += weights[i];
            totalValue += values[i];
        }
    }

    printf("Greedy Approach - Total Value: %d, Total Weight: %d\n", totalValue, currentWeight);
}

// Dynamic Programming approach for Knapsack
int knapsackDP(int n, int weights[], int values[], int capacity) {
    int dp[n + 1][capacity + 1];

    // Build table dp[][] in a bottom-up manner
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= capacity; w++) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;
            } else if (weights[i - 1] <= w) {
                dp[i][w] = (values[i - 1] + dp[i - 1][w - weights[i - 1]] > dp[i - 1][w])
                               ? values[i - 1] + dp[i - 1][w - weights[i - 1]]
                               : dp[i - 1][w];
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    return dp[n][capacity];
}

int main() {
    int n, capacity;

    // Example dataset
    printf("Enter the number of items: ");
    scanf("%d", &n);

    int weights[n], values[n];
    printf("Enter the weights and values of the items:\n");
    for (int i = 0; i < n; i++) {
        printf("Item %d - Weight: ", i + 1);
        scanf("%d", &weights[i]);
        printf("Item %d - Value: ", i + 1);
        scanf("%d", &values[i]);
    }

    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &capacity);

    // Measure time for Greedy Approach
    clock_t start = clock();
    knapsackGreedy(n, weights, values, capacity);
    clock_t end = clock();
    double time_greedy = (double)(end - start) / CLOCKS_PER_SEC;
    printf("Time taken by Greedy Approach: %.6f seconds\n", time_greedy);

    // Measure time for Dynamic Programming Approach
    start = clock();
    int maxValueDP = knapsackDP(n, weights, values, capacity);
    end = clock();
    double time_dp = (double)(end - start) / CLOCKS_PER_SEC;
    printf("Dynamic Programming Approach - Total Value: %d\n", maxValueDP);
    printf("Time taken by Dynamic Programming Approach: %.6f seconds\n", time_dp);

    return 0;
}
