#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function to merge two halves for Merge Sort
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    int L[n1], R[n2];

    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int i = 0; i < n2; i++)
        R[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
        }
    }

    while (i < n1)
        arr[k++] = L[i++];
    while (j < n2)
        arr[k++] = R[j++];
}

// Merge Sort function
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// Partition function for Quick Sort
int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return i + 1;
}

// Quick Sort function
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Function to print an array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int arr[] = {38, 27, 43, 3, 9, 82, 10};
    int n = sizeof(arr) / sizeof(arr[0]);

    // Create copies of the array for each sort
    int arrMerge[n], arrQuick[n];
    for (int i = 0; i < n; i++) {
        arrMerge[i] = arr[i];
        arrQuick[i] = arr[i];
    }

    // Measure Merge Sort time
    clock_t start = clock();
    mergeSort(arrMerge, 0, n - 1);
    clock_t end = clock();
    double mergeSortTime = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Merge Sort Time: %f seconds\n", mergeSortTime);

    // Measure Quick Sort time
    start = clock();
    quickSort(arrQuick, 0, n - 1);
    end = clock();
    double quickSortTime = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Quick Sort Time: %f seconds\n", quickSortTime);

    // Print sorted arrays (optional)
    printf("Sorted array with Merge Sort: ");
    printArray(arrMerge, n);

    printf("Sorted array with Quick Sort: ");
    printArray(arrQuick, n);

    // Performance comparison
    if (mergeSortTime < quickSortTime) {
        printf("Merge Sort is faster.\n");
    } else {
        printf("Quick Sort is faster.\n");
    }

    return 0;
}
